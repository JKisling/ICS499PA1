package quizmaster;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.Border;

import core.BigWordCollection;
import core.Config;

/**
*
* @author surin.assa
*/
public class ConfigPanel extends JPanel 
		implements PropertyChangeListener {

	private static final long serialVersionUID = 1L;
	// Variables declaration - do not modify
	private JLabel minLenLabel;
	private JLabel maxLenLabel;	
	private JLabel minStrengthLabel;
	private JLabel maxStrengthLabel;
	
	private JLabel numberWordsFoundLabel;
	private JTextField showNumberWordsFoundTF;
	private JTextField showTotalWordsTF;
	private JLabel topicLabel;
	private JLabel totalWordsLabel;
	
	private JFormattedTextField minLenTF; 	
	private JFormattedTextField maxLenTF;
	private JFormattedTextField minStrengthTF;
	private JFormattedTextField maxStrengthTF;
	
	private JButton readingQuizBttn;
	private JButton setConfigBttn;
	private JButton vocabQuizBttn;
	private JButton writingQuizBttn;

	private JComboBox<String> topicComboBox;
	
	private static int minLen = 1;
	private static int maxLen = 10;
	private static int minStr = 1;
	private static int maxStr = 7;
		
	private String topicValue = "";
	private int minLenValue = 2;
	private int maxLenValue = 10;
	private int minStrValue = 1;
	private int maxStrValue = 6;
		
	private NumberFormat minLenFormat;
	private NumberFormat maxLenFormat;
	private NumberFormat minStrFormat;
	private NumberFormat maxStrFormat;
	
	private int numWordsFound;
	private BigWordCollection allWords;
	private BigWordCollection foundWords;
	private QuizMasterGUI internalgui;
	// End of variables declaration  

   /**
    * Creates new form NewJPanel
    */
	public ConfigPanel(Color color, final QuizMasterGUI quizMaster ) {
		
		this.internalgui = quizMaster;
		allWords = new BigWordCollection();	
		
		minLenFormat = NumberFormat.getNumberInstance();		 
		maxLenFormat = NumberFormat.getNumberInstance();
		minStrFormat = NumberFormat.getNumberInstance();		 
		maxStrFormat = NumberFormat.getNumberInstance();
		
		initComponents(color);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents(Color color) {
		
		setBackground(color);
		
		// initialize components for the configuration panel
		
		Border border = BorderFactory.createEtchedBorder();
		
		showNumberWordsFoundTF = new JTextField();
		showNumberWordsFoundTF.setFont(Config.LABELFONT);
		showNumberWordsFoundTF.setBorder(border);
		showNumberWordsFoundTF.setEditable(false);
		
		// label "Total Number of words"
		totalWordsLabel = new JLabel("Total number of words:");
		totalWordsLabel.setFont(Config.LABELFONT);
		
		// label to show the total words
		showTotalWordsTF = new JTextField(String.valueOf(allWords.size()));		
		showTotalWordsTF.setFont(Config.LABELFONT);
		showTotalWordsTF.setBorder(border);
		showTotalWordsTF.setEditable(false);
		
		// label number of word for this configuration
		numberWordsFoundLabel = new JLabel("Number of words for this configuration:");
		numberWordsFoundLabel.setFont(Config.LABELFONT);

		// input from user parts
		topicLabel = new JLabel("Topic");
		topicLabel.setFont(Config.LABELFONT);
		
		// topic combo box
		topicComboBox = new JComboBox<String>();
		topicComboBox.addItem("Any");
		Set<String> keys = allWords.getBigWordsTopicsTable().keySet();	
		
		List<String> keys_list = new ArrayList<String>(keys);
	    Collections.sort(keys_list);

//	    for (String str : v) {
//	    	
//	    }
//		Collections.sort(keys);
		for(String val: keys_list)
			topicComboBox.addItem(val);		
		topicComboBox.setFont(Config.LABELFONT);
		topicComboBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				topicValue = topicComboBox.getSelectedItem().toString();
			}
		});		
		
		// minimum length label
		minLenLabel = new JLabel("Length of the word (minimum)");
		minLenLabel.setFont(Config.LABELFONT);
		
		// minimum length text field
		minLenTF = new JFormattedTextField(minLenFormat);
		minLenTF.setFont(Config.LABELFONT);
		minLenTF.setValue(minLenValue);
		minLenTF.addPropertyChangeListener("value",this);
		
		// maximum length label
		maxLenLabel = new JLabel("Length of the word (maximum)");
		maxLenLabel.setFont(Config.LABELFONT);
		
		maxLenTF = new JFormattedTextField(maxLenFormat);
		maxLenTF.setFont(Config.LABELFONT);
		maxLenTF.setValue(maxLenValue);
		maxLenTF.addPropertyChangeListener("value",this);
		
		// minimum strength label
		minStrengthLabel = new JLabel("Strength of the word (minimum)");
		minStrengthLabel.setFont(Config.LABELFONT);
		
		// minimum strength text field
		minStrengthTF = new JFormattedTextField(minStrFormat);
		minStrengthTF.setFont(Config.LABELFONT);
		minStrengthTF.setValue(minStrValue);
		minStrengthTF.addPropertyChangeListener("value",this);
		
		// maximum strength label
		maxStrengthLabel = new JLabel("Strength of the word (maximum)");		
		maxStrengthLabel.setFont(Config.LABELFONT);
		
		// maximum strength text field
		maxStrengthTF = new JFormattedTextField(maxStrFormat);
		maxStrengthTF.setFont(Config.LABELFONT);
		maxStrengthTF.setValue(maxStrValue);
		maxStrengthTF.addPropertyChangeListener("value",this);
	
		// *************all the buttons
		
		// reading quiz button
		readingQuizBttn = new JButton("Start Reading Quiz");		
		readingQuizBttn.setFont(Config.LABELFONT);
		readingQuizBttn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				setGameCollection(2);		
			}
		});
		
		// writing quiz button
		writingQuizBttn = new JButton("Start Writting Quiz");
		writingQuizBttn.setFont(Config.LABELFONT);
		writingQuizBttn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				setGameCollection(3);  
			}
		});

		// vocabulary quiz button
		vocabQuizBttn = new JButton("Start Vocabulary Quiz");
		vocabQuizBttn.setFont(Config.LABELFONT);
		vocabQuizBttn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				setGameCollection(4);
			}
		});


		// set configuration button
		setConfigBttn = new JButton("Set Configuration");
		setConfigBttn.setFont(Config.LABELFONT);
		setConfigBttn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				setGameCollection(-1);
				
			}
		});


		// starts layout. 
		GroupLayout layout = new GroupLayout(this);
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.TRAILING)
				.addGroup(layout.createSequentialGroup()
					.addGap(337)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(maxStrengthLabel)
						.addComponent(minStrengthLabel)
						.addComponent(maxLenLabel, GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
						.addComponent(minLenLabel, GroupLayout.PREFERRED_SIZE, 249, GroupLayout.PREFERRED_SIZE)
						.addComponent(topicLabel))
					.addGap(60)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(maxStrengthTF, GroupLayout.PREFERRED_SIZE, 217, GroupLayout.PREFERRED_SIZE)
						.addComponent(minStrengthTF, 217, 217, 217)
						.addComponent(maxLenTF, 217, 217, 217)
						.addComponent(minLenTF, GroupLayout.PREFERRED_SIZE, 217, GroupLayout.PREFERRED_SIZE)
						.addComponent(topicComboBox, 0, 217, Short.MAX_VALUE))
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				.addGroup(layout.createSequentialGroup()
					.addGap(101)
					.addComponent(totalWordsLabel, GroupLayout.PREFERRED_SIZE, 203, GroupLayout.PREFERRED_SIZE)
					.addGap(16)
					.addComponent(showTotalWordsTF, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
					.addComponent(numberWordsFoundLabel, GroupLayout.PREFERRED_SIZE, 320, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addComponent(showNumberWordsFoundTF, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
					.addGap(123))
				.addGroup(layout.createSequentialGroup()
					.addGap(100)
					.addComponent(setConfigBttn)
					.addGap(106))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(42)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(totalWordsLabel)
						.addComponent(showTotalWordsTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(numberWordsFoundLabel)
						.addComponent(showNumberWordsFoundTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(125)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(topicComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(topicLabel))
					.addGap(30)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(minLenLabel)
						.addComponent(minLenTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(39)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(maxLenLabel)
						.addComponent(maxLenTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(35)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(minStrengthLabel)
						.addComponent(minStrengthTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(38)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(maxStrengthLabel)
						.addComponent(maxStrengthTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
				     	.addComponent(setConfigBttn, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE))
					.addGap(40))
		);
		
		this.setLayout(layout);

		// ends layout
	}  // end initComponents
   
	/**
	 * this method sets the game collection and switches the index when clicked
	 * 
	 * @param index tab index between 2 and 4 or -1 if not changing tabs.
	 * @author israel.yemer
	 */
	private void setGameCollection(int index) {

		if (allWords.size() > 0) {
			foundWords = allWords.getBigWordCollectionByCriteria(
					topicValue, // selected topic from drop down menu
					minLenValue, // minimum length of the word
					maxLenValue, // maximum length of the word
					minStrValue, // minimum strength of the word
					maxStrValue); // maximum strength of the word

			Config.gameCollection = foundWords;
			System.out.println(Config.gameCollection.size());
			Config.gameCollection.removeDuplicates();
			System.out.println(Config.gameCollection.size());
		}
		// this label shows up after set configuration button clicked
		numWordsFound = foundWords.size();
		showNumberWordsFoundTF.setText(String.valueOf(numWordsFound));		
		if(index != -1)
			internalgui.selectTabbedPaneIndex(index);		
	}


	/**
	 * Used for field validation for the min/max length and min/max strength
	 * @author sean.ford	   
	 */
	@Override
	public void propertyChange(PropertyChangeEvent e) {
		Object source = e.getSource();		
        if (source == minLenTF) {
        	minLenValue = ((Number)minLenTF.getValue()).intValue();
            minLenValue = minLenValue < minLen ? minLen : minLenValue;
            minLenValue = minLenValue > maxLen ? maxLen : minLenValue;
            minLenValue = minLenValue > maxLenValue ? maxLenValue : minLenValue;
            minLenTF.setValue(minLenValue);
        } else if (source == maxLenTF) {
        	maxLenValue = ((Number)maxLenTF.getValue()).intValue();
        	maxLenValue = maxLenValue < minLen ? minLen : maxLenValue;
            maxLenValue = maxLenValue > maxLen ? maxLen : maxLenValue;
            maxLenValue = maxLenValue < minLenValue ? minLenValue : maxLenValue;
            maxLenTF.setValue(maxLenValue);
        } else if (source == minStrengthTF) {
        	minStrValue = ((Number)minStrengthTF.getValue()).intValue();
        	minStrValue = minStrValue < minStr ? minStr : minStrValue;
            minStrValue = minStrValue > maxStr ? maxStr : minStrValue;
            minStrValue = minStrValue > maxStrValue ? maxStrValue : minStrValue;
            minStrengthTF.setValue(minStrValue);
        } else if (source == maxStrengthTF) {
        	maxStrValue = ((Number)maxStrengthTF.getValue()).intValue();
        	maxStrValue = maxStrValue < minStr ? minStr : maxStrValue;
            maxStrValue = maxStrValue > maxStr ? maxStr : maxStrValue;
            maxStrValue = maxStrValue < minStrValue ? minStrValue : maxStrValue;
            maxStrengthTF.setValue(maxStrValue);
        } 
	}	
}

